import os 
def read_accuracy_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    
    accuracies = {}
    
    for line in lines:
        parts = line.split()
        #print(parts)
        if len(parts)>1:
            if parts[0] == "*********Transfer":
                current_model = parts[2].lower()
                accuracies[current_model] = {'benign': 0.0, 'adversarial': 0.0}
            elif parts[0] == "Accuracy":
                current_accuracy = float(parts[4].replace('%', ''))
                if 'benign' in line:
                    accuracies[current_model]['benign'] = current_accuracy
                elif 'adversarial' in line:
                    accuracies[current_model]['adversarial'] = current_accuracy
        
    return accuracies


def calculate_average_across_models(dictionary_list):
    sum_values = {}
    count_values = {}

    for dictionary in dictionary_list:
        for model, acc in dictionary.items():
            if model not in sum_values:
                sum_values[model] = {'benign': 0.0, 'adversarial': 0.0}
                count_values[model] = 0

            sum_values[model]['benign'] += acc['benign']
            sum_values[model]['adversarial'] += acc['adversarial']
            count_values[model] += 1

    # Calculate averages
    average_values = {}
    for model, acc_sum in sum_values.items():
        count = count_values[model]
        average_values[model] = {
            'benign': acc_sum['benign'] / count,
            'adversarial': acc_sum['adversarial'] / count
        }

    return average_values


def main():
    path = 'output/Adv_val.X'
    accuracies = []
    for dir in os.listdir(path):
        file_path = [f for f in os.listdir(os.path.join(path, dir)) if f.endswith(".txt")][0]
        relative_path = os.path.join(os.path.join(path, dir),file_path)
        accuracies.append(read_accuracy_file(relative_path))
        
        
    avg_values = calculate_average_across_models(accuracies)
    print(avg_values)    

if __name__ == "__main__":
    main()

